package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicReference;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.network.DisconnectionEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.event.impl.player.TickEvent;
import cc.unknown.event.impl.world.ChangeWorldEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Info;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.Cold;
import cc.unknown.utils.network.TimedPacket;
import net.minecraft.network.Packet;
import net.minecraft.network.play.server.SPacketChat;
import net.minecraft.network.play.server.SPacketTimeUpdate;

@Info(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private Queue<TimedPacket> outboundPackets = new ConcurrentLinkedQueue<>();
	private Queue<TimedPacket> inboundPackets = new ConcurrentLinkedQueue<>();
	
	private SliderValue outboundDelay = new SliderValue("Outbound Delay", 250, 0, 1000, 10);
	private SliderValue inboundDelay = new SliderValue("Inbound Delay", 142, 0, 1000, 10);
	
	public FakeLag() {
		this.registerSetting(outboundDelay, inboundDelay);
	}

	@Override
	public void onEnable() {
		super.onEnable();
	}

	@Override
	public void onDisable() {
		clearPackets();
		super.onDisable();
	}

	@EventLink
	public void onGui(ClickGuiEvent e) {
		AtomicReference<String> suffixRef = new AtomicReference<>();
		suffixRef.set("- [" + inboundDelay.getInputToInt() + " | " + outboundDelay.getInputToInt() + " ms]");
		this.setSuffix(suffixRef.get());
	}

	@EventLink
	public void onTick(TickEvent.Pre e) {
		if (mc.player == null) {
			resetPackets();
		}
		
		while (!inboundPackets.isEmpty()) {
			if (inboundPackets.peek().getCold().getCum(inboundDelay.getInputToInt())) {
				Packet<?> packet = inboundPackets.poll().getPacket();
				mc.getNetHandler().receiveSilent(packet);
			} else {
				break;
			}
		}
		
		while (!outboundPackets.isEmpty()) {
			if (outboundPackets.peek().getCold().getCum(outboundDelay.getInputToInt())) {
				Packet<?> packet = outboundPackets.poll().getPacket();
				mc.getNetHandler().receiveSilent(packet);
			} else {
				break;
			}
		}
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		if (mc.player == null) {
			resetPackets();
		}
		
		if (e.getPacket() instanceof SPacketChat || e.getPacket() instanceof SPacketTimeUpdate)
			return;

		if (e.isSend()) {
			inboundPackets.add(new TimedPacket(e.getPacket()));
			e.setCancelled(true);
		}

		if (e.isReceive()) {
			outboundPackets.add(new TimedPacket(e.getPacket()));
			e.setCancelled(true);
		}
	}

	@EventLink
	public void onChangeWorld(ChangeWorldEvent e) {
		clearPackets();
	}

	@EventLink
	public void onDisconnect(final DisconnectionEvent e) {
		if (e.isClient()) {
			clearPackets();
			this.toggle();
		}
	}

	private void clearPackets() {
		if (mc.player != null) {
			if (!outboundPackets.isEmpty()) {
				outboundPackets.forEach(p -> mc.player.sendQueue.sendSilent(p.getPacket()));
				outboundPackets.clear();
			}

			if (!inboundPackets.isEmpty()) {
				inboundPackets.forEach(p -> mc.player.sendQueue.receiveSilent(p.getPacket()));
				inboundPackets.clear();
			}
		} else {
			resetPackets();
		}
	}

	private void resetPackets() {
		outboundPackets.clear();
		inboundPackets.clear();
	}
}