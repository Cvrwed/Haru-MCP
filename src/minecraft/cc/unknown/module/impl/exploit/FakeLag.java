package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicReference;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.network.DisconnectionEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.other.ClickGuiEvent;
import cc.unknown.event.impl.world.ChangeWorldEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.Cold;
import cc.unknown.utils.network.TimedPacket;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCloseWindow;
import net.minecraft.network.play.client.CPacketPlayerBlockPlacement;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketUpdateSign;
import net.minecraft.network.play.server.SPacketChat;
import net.minecraft.network.play.server.SPacketOpenWindow;
import net.minecraft.network.status.server.SPacketPong;

@Register(name = "FakeLag", category = Category.Exploit)
public class FakeLag extends Module {

	private ArrayList<Packet> inboundPackets = new ArrayList<Packet>();
	private ArrayList<Packet> outboundPackets = new ArrayList<Packet>();

	private SliderValue inboundDelay = new SliderValue("Inbound Delay", 142, 0, 1000, 10);
	private SliderValue outboundDelay = new SliderValue("Outbound Delay", 250, 0, 1000, 10);
	private SliderValue chance = new SliderValue("Chance", 100, 0, 100, 1);

	private Cold timer = new Cold(0);

	public FakeLag() {
		this.registerSetting(inboundDelay, outboundDelay, chance);
	}

	@EventLink
	public void onGui(ClickGuiEvent e) {
		AtomicReference<String> suffixRef = new AtomicReference<>();
		suffixRef.set("- [" + inboundDelay.getInputToInt() + " | " + outboundDelay.getInputToInt() + " ms]");
		this.setSuffix(suffixRef.get());
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mc.player == null) {
			toggle();
			return;
		}

		if ((mc.player != null && !inboundPackets.isEmpty()) || (mc.player != null && !outboundPackets.isEmpty())) {
			clearPackets();
		}
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mc.player == null)
			return;

		if ((mc.player != null && !inboundPackets.isEmpty()) || (mc.player != null && !outboundPackets.isEmpty())) {
			clearPackets();
		}
	}

	@EventLink
	public void onPacket(PacketEvent e) {
		final Packet p = e.getPacket();

		if (p instanceof SPacketChat)
			return;

		if (mc.player.isDead || !PlayerUtil.inGame() || mc.player.isInWater())
			return;

		if (chance.getInput() != 100.0D && Math.random() >= chance.getInput() / 100.0D) {
			return;
		}

		if (e.isSend()) {
			if (!outboundPackets.isEmpty()) {
				if (timer.getCum((long) outboundDelay.getInput(), System.currentTimeMillis())) {
					outboundPackets.add(p);
					e.setCancelled(true);
				}
			}
		}

		if (e.isReceive()) {
			if (!inboundPackets.isEmpty()) {
				if (timer.getCum((long) inboundDelay.getInput(), System.currentTimeMillis())) {
					inboundPackets.add(p);
					e.setCancelled(true);
				}
			}
		}
	}

	@EventLink
	public void onChangeWorld(ChangeWorldEvent e) {
		if (e.getChangeWorld() == null) {
			clearPackets();
		}
	}

	@EventLink
	public void onDisconnect(final DisconnectionEvent e) {
		if (e.isClient()) {
			clearPackets();
			this.toggle();
		}
	}

	private void clearPackets() {
		if (mc.player != null) {
			if (!outboundPackets.isEmpty()) {
				outboundPackets.forEach(p -> mc.player.sendQueue.sendSilent(p));
				outboundPackets.clear();
			}

			if (!inboundPackets.isEmpty()) {
				inboundPackets.forEach(p -> mc.player.sendQueue.receiveSilent(p));
				inboundPackets.clear();
			}
		} else {
			this.outboundPackets.clear();
			this.inboundPackets.clear();
		}
	}
}
